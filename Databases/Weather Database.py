'''
I created this DB to store weather data. I've manually entered some data for now; hoping
to build a web-scraping script soon to automate it. 
'''

import os
import sqlite3

def createDB():
    db_filename = 'weather.db'
    db_is_new = not os.path.exists(db_filename)
    conn = sqlite3.connect(db_filename)

    if db_is_new:
        print 'need to create schema'
    else:
        print 'db exists'

    conn.close()
	
def createTable():

	conn = sqlite3.connect('weather.db')
	c=conn.cursor()
	
	c.execute('''CREATE TABLE historical_weather 
				(Key CHAR(4), Time CHAR(10), Date CHAR(8), Temp DECIMAL(3,1), Heat_Cold_Index DECIMAL(3,1), Dew_Point DECIMAL(2,1), Humidity INT, Pressure DECIMAL(3,2), Visibility DECIMAL(3,1))''')

	conn.commit()
	conn.close()
	
def insertData():
	conn = sqlite3.connect('weather.db')
	c=conn.cursor()
	multilines = [
	('KIGX','12:56 AM', '01012017', 45.0, 42.5, 26.1, 48, 30.12, 10.0 ),
	('KIGX','8:56 AM' , '01012017', 42.1, 0.0 , 42.1, 100,30.20,  2.0 ),
	('KIGX','5:56 PM' , '01012017', 48.0, 0.0 , 48.0, 100,30.26,  3.0 ),
	('KIGX','12:56 AM', '03012017', 64.9, 0.0 , 59.0, 81, 30.06, 10.0 ),
	('KIGX','8:56 AM' , '03012017', 48.9, 0.0 , 37.9, 66, 30.08, 10.0 ),
	('KIGX','5:56 PM' , '03012017', 69.1, 0.0 , 41.0, 36, 29.84, 10.0 ),
	('KIGX','12:56 AM', '05012017', 69.1, 0.0 , 66.9, 93, 30.08, 10.0 ),
	('KIGX','8:56 AM' , '05012017', 73.0, 0.0 , 66.9, 81, 30.01,  8.1 ),
	('KIGX','5:56 PM' , '05012017', 80.1, 81.7, 64.0, 58, 29.78, 10.0 ),
	('KIGX','12:56 AM', '07012017', 73.0, 0.0 , 72.0, 96, 30.03, 10.0 ),
	('KIGX','8:56 AM' , '07012017', 73.9, 0.0 , 72.0, 93, 30.03, 10.0 ),
	('KIGX','5:56 PM' , '07012017', 96.3, 75.0, 71.1, 67, 29.98, 10.0 ),
	('KIGX','12:56 AM', '09012017', 70.0,  0.0, 69.1, 97, 30.00,  6.0 ),
	('KIGX','8:56 AM' , '09012017', 71.1,  0.0, 70.0, 96, 30.03,  7.0 ),
	('KIGX','5:56 PM' , '09012017', 66.9,  0.0, 66.0, 97, 29.95,  4.0 ),
	('KIGX','12:56 AM', '11012016', 54.0,  0.0, 51.1, 90, 30.24, 10.0 ),
	('KIGX','8:56 AM' , '11012016', 54.0,  0.0, 48.0, 80, 30.32, 10.0 ),
	('KIGX','5:56 PM' , '11012016', 61.0,  0.0, 54.0, 78, 30.28, 10.0 ),
	('KSFO','12:56 AM', '01012017', 51.1,  0.0, 43.0, 74, 29.96, 10.0 ),
	('KSFO','8:56 AM' , '01012017', 50.0,  0.0, 37.0, 61, 29.94, 10.0 ),
	('KSFO','5:56 PM' , '01012017', 48.9,  0.0, 37.0, 64, 29.94, 10.0 ),
	('KSFO','12:56 AM', '03012017', 45.0, 42.6, 39.9, 82, 30.36, 10.0 ),
	('KSFO','8:56 AM' , '03012017', 50.0,  0.0, 43.0, 77, 30.43, 10.0 ),
	('KSFO','5:56 PM' , '03012017', 55.9,  0.0, 37.0, 49, 30.34, 10.0 ),
	('KSFO','12:56 AM', '05012017', 55.0,  0.0, 48.0, 77, 30.08, 10.0 ),
	('KSFO','8:56 AM' , '05012017', 64.9,  0.0, 48.9, 56, 30.07, 10.0 ),
	('KSFO','5:56 PM' , '05012017', 73.0,  0.0, 45.0, 37, 29.95, 10.0 ),
	('KSFO','12:56 AM', '07012017', 55.0,  0.0, 51.1, 86, 29.94,  8.0 ),
	('KSFO','8:56 AM' , '07012017', 55.0,  0.0, 50.0, 83, 29.94,  9.0 ),
	('KSFO','5:56 PM' , '07012017', 62.1,  0.0, 50.0, 65, 29.86, 10.0 ),
	('KSFO','5:56 AM' , '09012017', 68.0,  0.0, 57.9, 70, 29.80, 10.0 ),
	('KSFO','12:56 PM', '09012017', 84.9, 86.1, 64.0, 49, 29.81,  8.0 ),
	('KSFO','6:56 AM' , '09012017', 68.0,  0.0, 57.9, 70, 29.80, 10.0 ),
	('KSFO','12:56 AM', '11012016', 60.1,  0.0, 53.1, 78, 29.99, 10.0 ),
	('KSFO','8:56 AM' , '11012016', 60.1,  0.0, 53.1, 78, 30.08, 10.0 ),
	('KSFO','5:56 PM' , '11012016', 60.1,  0.0, 48.0, 64, 30.10, 10.0 ),
	('KMCJ','12:56 AM', '01012017', 64.4,  0.0, 64.4, 100,29.81,  7.0 ),
	('KMCJ','8:56 AM' , '01012017', 64.4,  0.0, 64.4, 100,29.87,  3.0 ),
	('KMCJ','5:56 PM' , '01012017', 71.6,  0.0, 62.6, 73, 29.81, 10.0 ),
	('KMCJ','12:56 AM', '03012017', 73.4,  0.0, 69.8, 88, 29.88,  4.0 ),
	('KMCJ','8:56 AM' , '03012017', 75.2,  0.0, 68.0, 78, 29.96,  3.0 ),
	('KMCJ','5:56 PM' , '03012017', 71.6,  0.0, 37.4, 29, 30.04, 10.0 ),
	('KMCJ','12:56 AM', '05012017', 68.0,  0.0, 37.4, 33, 29.94, 10.0 ),
	('KMCJ','8:56 AM' , '05012017', 69.8,  0.0, 55.0, 49, 29.98, 10.0 ),
	('KMCJ','5:56 PM' , '05012017', 82.4,  0.0, 48.2, 30, 29.88, 10.0 ),
	('KMCJ','12:56 AM', '07012017', 82.4, 90.9, 77.0, 84, 29.98,  5.0 ),
	('KMCJ','8:56 AM' , '07012017', 84.2, 92.3, 75.2, 74, 30.07,  4.0 ),
	('KMCJ','5:56 PM' , '07012017', 89.6, 96.2, 71.6, 55, 30.00,  7.0 ),
	('KMCJ','5:56 AM' , '09012017', 68.0,  0.0, 57.9, 70, 29.80, 10.0 ),
	('KMCJ','12:56 PM', '09012017', 84.9, 86.1, 64.0, 49, 29.81,  8.0 ),
	('KMCJ','6:56 AM' , '09012017', 68.0,  0.0, 57.9, 70, 29.80, 10.0 ),
	('KMCJ','12:56 AM', '11012016', 73.4,  0.0, 68.0, 83, 29.98, 10.0 ),
	('KMCJ','8:56 AM' , '11012016', 75.2,  0.0, 69.8, 83, 30.01,  9.0 ),
	('KMCJ','5:56 PM' , '11012016', 80.6, 84.6, 71.6, 74, 29.96, 10.0 )]
	
	c.executemany('''INSERT INTO historical_weather VALUES(?,?,?,?,?,?,?,?,?)''', multilines)
	conn.commit()
	conn.close()
	
def dropTable():
	conn = sqlite3.connect('weather.db')
	c=conn.cursor()
	c.execute('DROP TABLE historical_weather')
	conn.commit()
	conn.close()
	
def main():
  
  createDB()
	createTable()
	insertData()

	
if __name__=="__main__":
	main()	
	
